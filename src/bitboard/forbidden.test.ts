import { forbidden, ForbiddenKind, forbiddens } from "./forbidden"
import { Point } from "./point"
import { parseSquare } from "./square"

test("forbiddens", () => {
  const square = parseSquare(`
    ---------------
    --o------------
    -o-o-----------
    --o------------
    ---------------
    ---------------
    -----------o---
    ----------o----
    ---------o-----
    ----ooo--------
    ---------------
    ---------------
    ---------------
    ---------------
    --------oo-ooo-
  `)!
  const result = forbiddens(square)
  const expected: [ForbiddenKind, Point][] = [
    [ForbiddenKind.doubleThree, [2, 12]],
    [ForbiddenKind.doubleFour, [8, 5]],
    [ForbiddenKind.overline, [10, 0]],
  ]
  expect(result).toEqual(expected)
})

test("doubleThree", () => {
  let square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    -------o-------
    ------o-o------
    -------o-------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBe(ForbiddenKind.doubleThree)

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    -----o-o-------
    ----o--o-------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBe(ForbiddenKind.doubleThree)

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    -------o-------
    ----x-o-o-x----
    -------o-------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBeUndefined()

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    -------x-------
    ---------------
    -------ooox----
    ------x--------
    ------oo-------
    ------o-oox----
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBeUndefined()
  expect(forbidden(square, [8, 6])).toBeUndefined()
  expect(forbidden(square, [9, 6])).toBe(ForbiddenKind.doubleThree)

  // following examples are from https://twitter.com/tanaseY/status/944521796585373696
  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ------x--------
    --o--o-o-------
    -----o--oo-----
    ----o------oo-x
    --------oxoo---
    ----------o----
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [6, 7])).toBeUndefined()

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ------x--------
    --o--o-o-------
    -----o--oo-----
    ----o------oo--
    --------oxoo---
    ----------o----
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [6, 7])).toBe(ForbiddenKind.doubleThree)
})

test("doubleFour", () => {
  let square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    -----o---------
    ------o--------
    -----oo-o------
    --------o------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBe(ForbiddenKind.doubleFour)

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ----o-o-o-o----
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBe(ForbiddenKind.doubleFour)

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ----oo--o-oo---
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBe(ForbiddenKind.doubleFour)

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---ooo---ooo---
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBe(ForbiddenKind.doubleFour)

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    -----oo-o------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBeUndefined()

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---o-----------
    ---------------
    -----o---------
    ------o--------
    -----oo-o------
    --------o------
    ---------x-----
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBeUndefined()
})

test("doubleFour", () => {
  let square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ----ooo-oo-----
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBe(ForbiddenKind.overline)

  square = parseSquare(`
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ----ooo--oo----
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
    ---------------
  `)!
  expect(forbidden(square, [7, 7])).toBeUndefined()
})
